#!/bin/bash

set -e

if [ -n "${DOTNET_VERBOSITY}" ]; then
  echo "--> Environment:"
  env | sort
  VERBOSITY_OPTION="-v ${DOTNET_VERBOSITY}"
else
  VERBOSITY_OPTION=""
fi

# sdk version
DOTNET_SDK_VERSION="${DOTNET_SDK_VERSION:-$DOTNET_SDK_BASE_VERSION}"
echo "Using SDK: $(dotnet --version)"

echo "---> Copying application source ..."
cp -Rf /tmp/src/. /app

# User settable environment
DOTNET_CONFIGURATION="${DOTNET_CONFIGURATION:-Release}"
DOTNET_STARTUP_PROJECT="${DOTNET_STARTUP_PROJECT:-.}"
DOTNET_ASPNET_STORE="${DOTNET_ASPNET_STORE:-false}"
if [ "$DOTNET_ASPNET_STORE" != "false" ]; then
  DOTNET_ASPNET_STORE="true"
fi


# Ensure there is a project file and derive assembly name from project name.
PROJFILES=(`find "${DOTNET_STARTUP_PROJECT}" -maxdepth 1 -name "*.??proj"`)
if [ ${#PROJFILES[@]} -eq 1 ]; then
  PROJFILE=$(basename ${PROJFILES[0]})
  APP_DLL_NAME="${PROJFILE: : -7}.dll"
else
  if [ ${#PROJFILES[@]} -eq 0 ]; then
    echo "error: DOTNET_STARTUP_PROJECT has no project file"
  else
    echo "error: DOTNET_STARTUP_PROJECT contains multiple project files"
  fi
  echo "You can specify the startup project by adding an '.s2i/environment' file to the source repository."
  # find all projects and strip leading './'
  PROJFILES=(`find -name "*.??proj" | sed "s|^\./||"`)
  if [ ${#PROJFILES[@]} -eq 0 ]; then
    echo "The source repository has no project files."
  else
    echo "The source repository contains the following projects:"
    for PROJFILE in ${PROJFILES[@]}; do
      echo "- ${PROJFILE}"
    done
    echo "Update the '.s2i/environment' file to specify the project you want to publish, for example DOTNET_STARTUP_PROJECT=${PROJFILES[0]}".
  fi
  exit 1
fi

# Override assembly name
if [ -n "$DOTNET_ASSEMBLY_NAME" ]; then
  APP_DLL_NAME="${DOTNET_ASSEMBLY_NAME}.dll"
fi

# Build nuget sources list for when doing the restore
RESTORE_OPTIONS=""
for SOURCE in $DOTNET_RESTORE_SOURCES; do
  RESTORE_OPTIONS="$RESTORE_OPTIONS --source $SOURCE"
done


# publish application
echo "---> Restoring application dependencies..."
dotnet restore "$DOTNET_STARTUP_PROJECT" $RESTORE_OPTIONS $VERBOSITY_OPTION
echo "---> Publishing application..."
dotnet publish "$DOTNET_STARTUP_PROJECT" -f "$DOTNET_FRAMEWORK" -c "$DOTNET_CONFIGURATION" $VERBOSITY_OPTION \
       --self-contained false /p:PublishWithAspNetCoreTargetManifest=$DOTNET_ASPNET_STORE -o $DOTNET_APP_PATH 

# check if the assembly used by the script exists
if [ ! -f "$DOTNET_APP_PATH/${APP_DLL_NAME}" ]; then
  echo "error: Build output does not contain entrypoint assembly: ${APP_DLL_NAME}"
  exit 1
fi

# Create run script in publish folder
cat << EOF >"$DOTNET_APP_PATH/$DOTNET_DEFAULT_CMD"
#!/bin/bash

exec dotnet ${APP_DLL_NAME} \$@
EOF
chmod +x "$DOTNET_APP_PATH/$DOTNET_DEFAULT_CMD"

# cleanup NuGet artifacts
rm -rf ~/{.local,.nuget}

# fix permissions
chgrp -R 0 /app
chmod -R g+rw /app
find /app -type d -exec chmod g+x {} +